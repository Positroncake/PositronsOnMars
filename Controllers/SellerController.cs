using Microsoft.AspNetCore.Mvc;
using PositronsOnMars.Models;

namespace PositronsOnMars.Controllers;

[ApiController]
[Route("api/Sellers")]
public class SellerController : ControllerBase
{
    /// <summary>
    /// Step 1: Validate all fields |
    /// Step 2: Generate ID and check for conflict |
    /// Step 3: Store to database |
    /// Step 4: Return item ID to user.
    /// </summary>
    /// <param name="item">Contains information about the item being sold.</param>
    /// <returns>Returns an HTTP status code.</returns>
    [HttpPost]
    [Route("ListNewItem")]
    public async Task<ActionResult> ListNewItem([FromBody] DbObjectItem item)
    {
        // Step 1
        // ID is autogenerated
        if (item.Type is 0) return BadRequest();
        if (item.Name is null or "") return BadRequest();
        // Image is optional
        if (item.Condition is sbyte.MaxValue) return BadRequest();
        if (item.Price < 0) return BadRequest();
        
        // Step 2
        // The chance that the same 64-bit ID is generated twice is very low.
        // Checking the database to see if the ID exists will bring a performance
        // penalty. https://en.wikipedia.org/wiki/Ostrich_algorithm
        // Todo: Figure out how to generate 64-bit number with C#'s RNGCSP, as only GetInt32() exists.

        await Task.Delay(1000);
        return Ok();
    }
}